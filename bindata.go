// Code generated by go-bindata.
// sources:
// templates/.dockerignore
// templates/.gitignore
// templates/Dockerfile
// templates/build.sh
// templates/entrypoint/Dockerfile
// templates/main.go
// templates/vendor/manifest
// templates/version.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Dockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcf\x2c\xe1\xaa\xae\xd6\x0b\x28\xca\xcf\x4a\x4d\x2e\xf1\x4b\xcc\x4d\xad\xad\xe5\x4a\xcd\x2b\x29\xaa\x2c\xc8\xcf\xcc\x2b\xd1\xc7\x90\x4b\xcf\xd7\xc5\xa7\x1e\x9b\x74\x52\x69\x66\x4e\x8a\x5e\x71\x06\x57\x72\x51\x7e\x71\xb1\x6e\x72\x7e\x6e\x41\x66\x4e\x2a\x48\x20\xc8\xd5\xd1\xc5\xd7\x55\x2f\x37\x85\x0b\x10\x00\x00\xff\xff\x6b\xa3\x55\x57\x89\x00\x00\x00")

func DockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_Dockerignore,
		".dockerignore",
	)
}

func Dockerignore() (*asset, error) {
	bytes, err := DockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".dockerignore", size: 137, mode: os.FileMode(420), modTime: time.Unix(1468360567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x4f\x41\x4b\xf4\x30\x10\xbd\xe7\x57\x04\xf6\xf2\x7d\x45\xb3\x28\x28\x5e\x45\xf1\xa8\xc2\x1e\x45\x4a\x9a\x4e\xba\xb3\xb4\x99\x98\x99\x4a\xcb\xb2\xff\xdd\xe9\xae\x7a\x51\x3c\x4c\x66\x5e\xde\xcb\xcb\x9b\x95\xbd\xa3\x21\x63\x0f\xad\x7d\x6a\x76\x10\xc4\x46\x05\x7c\x66\x37\xe2\x05\x83\xf5\xa9\xb5\xf7\x73\xf2\x83\xce\x3d\x36\x6c\xff\x6d\xb6\xbe\x7c\xab\xf9\xbf\xa9\x1c\x69\x79\x2d\x26\x63\x56\xf6\x81\xfa\x16\x0a\x9b\x9a\x9a\x9d\xa9\x05\x58\x96\xdb\xdb\x12\xb6\x28\xfa\x62\x2c\x60\x39\x43\xc0\xa8\x8e\x30\x09\x24\x46\x4a\xbc\xce\x05\x22\x4e\xc0\xea\xf3\x72\x75\x7d\xf3\xfe\xf6\x6a\x3e\xbb\xa3\x51\x2d\x2a\x17\x3a\xba\x70\x1d\x9d\xa6\x4b\x17\x4c\xad\xbd\x6e\x21\x8e\xe9\x0b\x74\x24\x73\x06\x5e\x54\x47\x0c\x53\xa6\x22\xae\x32\xa7\x20\x83\xc7\xb4\x70\x6a\x01\x13\xe8\x79\x4c\x57\xb9\x5c\x28\x9a\xfd\xde\x3d\x17\x5a\x96\x7a\xf4\x03\x1c\x0e\x06\x92\x94\x39\x13\x26\x59\xff\xe0\x3a\x3a\xff\x4b\xff\x1b\xdd\xa2\xfe\xf5\x11\x00\x00\xff\xff\x0b\x7d\x0c\x1c\x6f\x01\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 367, mode: os.FileMode(420), modTime: time.Unix(1468363696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xb7\x32\xd4\x33\xe3\xf2\x75\xf4\xf4\x0b\x01\x62\xd7\x20\x05\xff\xe4\x92\xfc\xa4\x9c\x52\x1d\x05\xcf\xbc\x64\x3d\x05\x9b\x94\xfc\xe4\xec\xd4\x22\x87\x7c\x88\xa8\x5e\x72\x7e\xae\x1d\x17\x57\xb8\x7f\x90\xb7\x8b\x67\x90\x82\x7e\x7a\xbe\x7e\x71\x51\xb2\x7e\x7a\x66\x49\x46\x69\x12\x48\x52\x1f\xaa\x50\xbf\xba\x5a\x2f\xa0\x28\x3f\x2b\x35\xb9\xc4\x2f\x31\x37\xb5\xb6\x96\xcb\xd9\x3f\x20\x52\x41\x8f\x24\x2d\x5c\x41\xa1\x7e\x0a\xa9\x79\x65\x0a\xce\xee\xfe\xf1\xae\x7e\x8e\x4e\x3e\xae\x2e\xb6\x06\x40\x77\x2b\x24\x95\x66\xe6\xa4\x28\xe8\xe6\x2b\xa0\xeb\x51\xd0\x4d\x54\xd0\xcd\x49\x49\xcb\x49\x4c\x2f\x56\x50\xd7\x2d\x56\x57\xd0\xe3\xe2\x72\xf6\x75\x51\x88\x56\xd2\xc3\xb0\x40\x29\x96\x0b\x10\x00\x00\xff\xff\x03\x3a\x2f\xc1\x09\x01\x00\x00")

func dockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerfile,
		"Dockerfile",
	)
}

func dockerfile() (*asset, error) {
	bytes, err := dockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile", size: 265, mode: os.FileMode(420), modTime: time.Unix(1461000606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _buildSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\xed\x6e\xdb\x3a\x0c\xfd\xef\xa7\xe0\xd5\x35\xfa\x71\x01\x47\xe8\xdd\x50\x0c\x29\xb2\x2d\x5d\x8a\xae\xc0\xda\x06\x2d\x8a\x0e\xd8\x86\x40\xb5\xe5\x44\xab\x2d\x05\x96\x92\xa6\x4d\xf3\xee\x13\x65\x39\x76\x3e\x3a\x24\x7f\x62\x91\x87\xa4\x0e\x79\xc4\x7f\xff\xa1\x0f\x42\xd2\x07\xa6\x47\x41\xd0\xed\xf7\x07\x57\xdd\xcb\xb3\xce\x7c\xde\xea\x17\xea\x37\x8f\xcd\x15\xcb\xf9\x62\x11\x9c\xde\x5d\x7c\xeb\x0d\x7a\x17\x37\x9d\xb0\x7f\xdf\xa3\x89\xd0\x26\xb8\xb8\xec\x9e\x9f\x95\xf8\x4c\xc5\x2c\xa3\x61\x15\x1f\x04\x0f\x13\x91\x25\x03\x25\x07\x89\x8a\x1f\x79\x71\x70\x08\xf3\x00\xa0\x3c\x80\x73\x42\x14\x19\x36\x84\xb0\xce\xd2\x46\xbb\x81\x56\xb0\x68\xc4\xbb\xcc\x3e\xdc\x7d\xc3\x50\x29\xdd\x21\xe1\x11\x69\x58\x58\x11\x8f\xac\xed\x7f\x12\x58\x23\x97\x53\x38\xbf\xbe\xbe\xb5\x06\xc4\x12\x7b\xe8\xde\x7c\xf9\xea\x8e\x08\x24\x36\xa0\xba\x03\x03\xbc\x85\x06\xc9\x8d\x35\x46\x42\x6a\xc3\xb2\x4c\x4f\xd2\x54\xcc\x20\x46\x53\x96\xa4\x19\x22\xf6\xa3\xa7\x7d\x88\x14\x90\x70\xbe\x6c\xc6\x82\x86\xf3\x8a\xf3\x22\x0a\xe7\x58\xae\xfc\xc7\x3a\x0b\xb2\xc2\x45\xcf\xd6\xf9\xac\x92\x04\x92\xb0\xe2\x49\x48\x02\x84\xe5\xc9\xf1\x7b\x82\xb1\xb1\x1a\x3f\x7b\x74\x3c\x86\x70\x59\xb9\xee\xf5\x7f\x96\xaf\x29\x9e\xc7\x4a\x48\x43\x31\x44\x48\x61\x7c\x48\x91\x43\x54\xa4\xcd\x30\xf8\x69\xcd\x7b\x7b\x90\x3f\x26\xa2\x80\x68\x25\x25\x06\x8f\x59\xfc\xc8\x86\x7c\xb7\x79\x65\xcc\x70\x6d\x1a\xf5\x31\x43\x31\x91\xab\xd1\xd6\x60\x63\xed\x55\xb0\x34\xd8\xcf\xa9\xca\x26\x39\x6f\x54\x6e\x53\x3e\x1b\xab\xc2\x50\x0f\xd9\xd4\x44\x69\x2f\x7b\x50\x11\x07\x1f\x85\x45\x53\x66\xd6\x54\x92\x73\xad\x2d\x91\x4e\x78\x84\x8a\x88\x47\x0a\x42\x6f\xc2\xf3\x4c\x18\x38\x72\xfd\x2d\x94\xd6\x83\x58\xe5\x63\x91\xf1\x81\x23\x7a\x70\x88\x59\x52\x55\x38\xa5\x81\x90\x50\xce\x05\x32\x21\x27\x33\xb0\x5f\x89\x7a\xd2\x27\x96\x9e\xbb\x54\x09\xc4\x79\x23\xf4\xdd\x87\x63\x70\xd3\x5b\xfa\x7d\x75\xe2\x72\x0b\x39\x6c\xc3\xa6\x4e\x3c\x70\x5d\x0f\x5e\xbe\xb5\x6e\x3f\x02\x4d\xf8\x94\xca\x49\x96\xb9\x90\x44\x49\x1e\xf8\x3f\x4b\xa6\x6c\x78\xc5\xc2\x35\x03\xc5\x00\x8d\xdf\xeb\x2b\xb8\x5e\x01\x71\x9e\x94\x59\xda\x09\x69\x6a\xd1\x4f\xad\x06\xae\x7b\xea\x18\x9c\xec\xf6\xe4\xe8\xa9\x71\x28\xe2\xed\x38\xe7\xa9\x81\x5e\x7d\x5b\x80\x95\xa7\xc2\x5a\xb6\xf8\xa0\xfe\x46\x75\x07\xb6\x8d\x27\xb9\x49\xb8\xe9\x6c\x94\x2d\x78\xc6\x99\xe6\x83\xf5\xf2\xcb\x17\x85\xbb\xb1\x7a\x66\x4b\x50\x65\x30\xcc\x62\xe2\x97\x14\xd7\x48\xbd\x39\x2c\xac\x65\x3d\xad\xe1\x0b\x59\x71\x90\xe5\x73\x9d\xbe\x1d\x80\xf5\x68\x25\x72\x72\x5f\x28\xc3\x4b\xdb\x1b\x01\x48\x22\x67\x42\xae\x3e\x17\x95\xf0\x6a\xa9\x8a\x14\x7e\xd8\x72\x68\x22\xd0\xe9\xd8\xbd\xe4\x06\x4f\xe0\xd7\x09\x98\x11\x97\x41\x2d\xea\x5e\x29\x89\x53\xa4\x48\xbc\x24\x6b\x0d\x96\x40\x7c\x6b\xe1\x27\x7c\x52\x22\xd8\x96\xdd\x5e\x6d\x5b\xea\xeb\xdb\xef\xcd\xbc\xcb\x4e\xee\x96\xd4\x4f\x29\x7a\x23\xf9\x4d\xe9\x6e\x16\xd8\x98\xeb\x6e\x85\xdc\x02\x89\xfc\x02\xd9\xb1\xd4\x96\xa5\xb3\xb5\x58\x99\xe0\x0e\x97\x56\x1b\x5a\xd4\x01\x5b\x7a\xe4\x7b\x4c\xed\x4d\x69\x83\x27\x5d\xbd\x4a\x73\xcd\xe1\xb8\x21\xfc\x1c\xfc\x09\x00\x00\xff\xff\xa5\x53\xaf\x87\xed\x07\x00\x00")

func buildShBytes() ([]byte, error) {
	return bindataRead(
		_buildSh,
		"build.sh",
	)
}

func buildSh() (*asset, error) {
	bytes, err := buildShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "build.sh", size: 2029, mode: os.FileMode(493), modTime: time.Unix(1468363977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4e\x2e\x4a\x2c\x49\xce\xe0\xf2\x75\xf4\xf4\x0b\x01\x62\xd7\x20\x05\xff\xe4\x92\xfc\xa4\x9c\x52\x1d\x05\xcf\xbc\x64\x3d\x05\x9b\x94\xfc\xe4\xec\xd4\x22\x87\x7c\x88\xa8\x5e\x72\x7e\xae\x1d\x17\x97\xa3\x8b\x8b\x42\x75\xb5\x5e\x40\x51\x7e\x56\x6a\x72\x89\x5f\x62\x6e\x6a\x6d\x2d\x86\x00\x97\xab\x5f\x48\x50\x64\x80\x3f\xd0\x64\x85\x68\x25\x3d\x7d\x74\x79\xa5\x58\x2e\x40\x00\x00\x00\xff\xff\x2b\xf7\x77\x5e\x84\x00\x00\x00")

func entrypointDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_entrypointDockerfile,
		"entrypoint/Dockerfile",
	)
}

func entrypointDockerfile() (*asset, error) {
	bytes, err := entrypointDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint/Dockerfile", size: 132, mode: os.FileMode(420), modTime: time.Unix(1454710734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x2a\xa0\x28\xb5\x48\x94\xee\xd5\xa8\x0f\xc6\x46\x6d\x53\xd4\x4e\x60\xa7\x41\x81\xa2\x28\x68\x79\xa4\xb0\x2b\x91\x2a\x49\x29\x59\x04\xfe\xef\x9d\x21\xa5\xac\xe3\xdd\xbd\x48\x24\x67\x38\x1f\xef\xbd\x61\x2f\xab\x8f\xb2\x41\xe8\xa4\xd2\x69\xaa\xba\xde\x58\x0f\x22\x4d\xb2\xba\xf3\x19\xfd\x5a\xd3\xf0\xcf\xb8\xf8\xbd\x72\xaa\xd1\xb2\xe5\x8d\xfb\xe4\x2a\xd9\x86\xa5\x57\x1d\x66\x29\x2d\x1a\xe5\x1f\x87\x7d\x51\x99\xee\x6a\xb0\xb5\x1c\xf1\xaa\x6a\x55\xf6\xd6\x50\x19\x8b\x14\xa8\x31\x97\x0e\xbb\x11\xed\x55\xfc\x9d\x79\xd5\xd2\xab\x47\xf2\x6d\x0d\x5b\xae\x11\x4e\x8d\xa3\x72\xca\xe8\x0e\x0f\x4a\x72\x9c\x03\xee\x07\xaa\x32\x4f\xd3\x51\x5a\x08\x3b\x58\xc2\x35\x16\xd7\xbc\x14\xd9\xcb\x4b\x71\x67\xcd\xbf\x58\xf9\x8d\xec\xf0\x78\x5c\x70\xb3\x19\xb9\xd7\x83\xae\x42\xe7\x22\x87\x97\x34\x91\x7d\x0f\x8b\x25\x50\xc9\xc5\x06\x9f\x56\x7d\x2f\xf2\x70\x58\xf0\x35\x8a\xf8\x45\xa0\x2c\x9a\x1f\xd0\x72\x3d\xe4\x31\xc6\xd5\x7c\x6f\x55\xf9\x78\x6e\x07\x1d\x4f\x7e\x6e\x65\xe3\xe8\xe0\xaf\xbf\x39\x0b\xef\x28\x6f\xc2\xeb\x9d\xb7\x4a\x37\xf3\x49\xc2\x09\x16\x00\x90\xe1\xb3\xec\xfa\x16\x2f\x00\xb3\x0b\x36\x94\x7a\x7c\x90\x76\x11\x8b\xd9\xde\xfe\x56\x7e\xb8\xdf\xac\xd6\xe5\xf1\xf8\x4f\xf9\xe7\x6a\x7d\xf7\x7b\x19\xdd\xfe\x70\xc4\x2a\x05\xc8\xca\x78\x1f\x5c\x88\x0f\x35\x25\x08\x1e\x47\xfa\x1c\x63\x51\xdb\x41\x0b\xe3\x8a\x95\x6d\x5c\x9e\x1e\x27\x58\xa8\x64\x51\x19\xed\xf1\xd9\xc3\x3b\x2e\xf0\x43\xdc\x04\xa4\xa6\xa2\x18\xad\x06\xfd\x6d\xef\xdd\xec\x4b\xa8\x26\xa4\x91\x7b\xb4\x1d\x5b\x3b\xf9\x11\x45\xf5\x28\x35\x50\x82\x5d\xd0\x4e\x1e\x1c\x68\x51\x6c\x8c\x57\xf5\x27\x31\xb9\x5f\xc0\xa4\xa8\x62\x77\xf3\xcb\x7d\xb9\x5d\x9f\x84\xda\x62\x85\x6a\xc4\x03\x87\xac\x65\xeb\x90\x4c\x8d\x01\x2e\x34\x52\x97\xfc\x74\x39\xb9\xd2\x9a\xa4\x4b\x3c\x29\xed\x5b\x2d\xb2\x29\x18\xd8\x29\xc4\x05\x3c\x49\xe5\x19\x0a\x6f\x00\x9f\x95\x27\x21\x24\x5f\xe4\x59\x82\xb7\x03\x12\x42\x82\xab\xa8\x8d\x0d\x49\x54\x0d\xe7\x8e\x81\xac\x37\x09\x6f\x7e\x68\x5b\xd8\x23\xec\x69\xb2\x8a\x10\x3c\xa1\xde\x4b\xca\x24\x7e\xe4\x1d\x01\x9c\x24\x87\xaf\x2b\xb3\x68\x8d\xe9\x17\xf0\xfd\x98\x11\xdf\x11\x63\xbe\xc2\xf3\x55\xec\x5a\xc4\x5e\xbc\x87\x77\x10\xb7\x48\x88\x1f\x72\x26\x71\xa6\xec\x8c\x8a\x33\xda\x26\x01\xbc\x65\x6f\x72\x9d\xd4\x27\x66\xb5\xf1\x70\x70\xb7\xb3\xe7\x92\xc4\x9f\xc1\xab\x54\x1f\x0d\x4f\xc7\xaf\xd8\xf6\xa7\xb4\x7f\xfd\x42\x12\x66\xb8\xd8\xe2\x41\x64\x00\x6b\xe5\x1c\x57\x61\xf1\xbf\x41\x59\xc2\x8f\xf5\x08\x97\x97\xf3\x3d\x06\xfa\x5b\xba\x8e\xe0\x7d\x46\xf3\x7d\x68\x3e\x4d\x2c\xfa\xc1\xea\x39\xf5\x2b\x1a\xaf\xb3\x78\xd2\xf9\x74\x46\xe0\x5a\xcb\xed\xc7\xa7\x87\xa7\x7d\x9a\x61\xf1\x50\x6e\x77\x37\xb7\x9b\x3c\xb6\x4f\x5e\xdf\x2d\x41\xab\x36\xb4\x42\x5b\x63\xd7\xe8\x78\xb4\x82\x12\x89\xf6\x5d\xcf\xbc\xd7\x22\x2b\xd9\x08\x4f\xf4\x48\xcd\x99\x41\x0f\xdd\x1e\xed\x44\xe7\xe7\xc0\x09\xbd\xa9\xc5\x9d\xd4\xaa\x22\xb9\x9c\xc6\x0c\x65\x15\x21\x90\xc8\x43\x73\x73\x6f\x53\xc4\x99\x26\x9e\xd2\xff\x03\x00\x00\xff\xff\x37\x99\x6d\x9a\xb9\x05\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 1465, mode: os.FileMode(420), modTime: time.Unix(1479854094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vendorManifest = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\xcd\x8e\xda\x30\x14\x85\xd7\xc9\x53\x54\x59\x53\x12\xe3\xf8\x6f\x5e\xa5\xea\xe2\x5e\xfb\x1a\x2c\x91\x38\xb2\x0d\xd2\xa8\x9a\x77\xaf\x61\xa8\x68\x47\x23\x0a\x23\xb1\x4a\x72\x72\x8f\xf2\x7d\xb1\xfd\xab\x6d\xba\x23\xa5\x1c\xe2\xdc\xbd\x7c\x1b\x56\xf5\xd1\xd1\x42\xb3\xa3\xd9\x06\xca\x35\xfb\xd1\x36\x4d\x9d\x6a\x9a\x2e\x4c\x4b\x4c\x65\x81\xb2\xab\x71\xb7\x0d\x65\x77\xc0\xb5\x8d\x53\x7f\x48\x1e\x8e\xd4\xdb\x7d\xe8\x56\xe7\xc9\x44\x4b\xcc\xa1\xc4\xf4\x7a\x9a\xdc\x95\xb2\xe4\x97\xbe\xbf\xdd\x38\x86\x0b\x44\x77\x64\x6b\x66\xd6\xec\xf2\x06\x13\xcc\xf6\xfc\xc5\x09\x72\xa1\x74\x89\xe7\x58\x28\x97\x13\x60\x49\x07\xaa\xd1\xdb\xea\xff\xa0\x36\x26\x8a\xb9\xdf\xc6\xef\x99\xa6\xaa\xdd\xbf\x5f\xee\xa5\xfe\x58\xff\x84\x9d\x2b\x44\xa9\xbd\xd6\x76\x1c\x99\xd6\xda\xf8\x01\x0c\x7a\x82\x11\x04\xe7\xdc\x71\x89\x8e\x09\x27\x6e\xcb\xfd\x41\xff\x97\xef\x4b\xca\x1e\x4a\xd8\x55\xf2\x7d\xbc\x5b\xf3\xb3\xca\xd5\xb0\x6a\x58\xa7\xbc\xd3\xa0\x85\x19\x84\x97\x0a\x98\x12\x1c\x3c\x8e\x8e\x9c\xb3\x5a\x50\x0d\x46\xff\x84\xe5\x9b\xa0\x94\xf9\xf4\xfb\xcf\x6c\x80\x7b\xba\x57\xe9\x46\xf3\x6a\x66\x2c\x92\x57\x96\x0b\x6e\x98\xb5\x50\xdd\x98\xf0\x9a\x69\xe6\xec\x80\x4c\xa3\x35\x8a\x4b\x87\xf8\x4c\xb3\x90\xeb\xdd\xeb\xc3\x5a\x1f\x6a\x7f\xad\x96\x44\x55\xb7\x9c\x17\xcc\x2b\x35\x68\x25\x06\x02\xab\x07\x0f\x5c\xa3\x11\x1b\x44\xe3\xf9\x46\x72\xf3\x04\xa7\x77\x88\x89\x5c\x80\x13\xa2\x23\x3c\x6c\xef\x15\xbb\xd9\xbd\xda\x79\x5f\x8f\x95\x80\xcd\x00\x5a\x1a\x33\x32\xa6\xe5\x38\x22\xd6\x5d\x28\x61\xc3\xa4\x03\x66\xb8\xb5\x8c\x3f\x6a\xd7\x36\x3f\xdb\xb7\xf6\x77\x00\x00\x00\xff\xff\x47\xf6\x54\xb3\x1c\x05\x00\x00")

func vendorManifestBytes() ([]byte, error) {
	return bindataRead(
		_vendorManifest,
		"vendor/manifest",
	)
}

func vendorManifest() (*asset, error) {
	bytes, err := vendorManifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vendor/manifest", size: 1308, mode: os.FileMode(420), modTime: time.Unix(1479853079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _versionGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xd2\xd7\x57\x08\x73\x0d\x0a\xf6\xf4\xf7\x53\xc8\x2c\x56\x28\xc9\x48\x55\x48\x2e\x2d\x2a\x4a\xcd\x2b\x51\x48\x2c\x28\xc8\xc9\x4c\x4e\x2c\xc9\xcc\xcf\x53\x08\x4b\x2d\x2a\x06\xd2\x5c\x65\x89\x45\x70\xe5\xb6\x0a\x4a\x06\x7a\x40\xa8\xc4\x05\x08\x00\x00\xff\xff\xbb\x3d\x68\x63\x52\x00\x00\x00")

func versionGoBytes() ([]byte, error) {
	return bindataRead(
		_versionGo,
		"version.go",
	)
}

func versionGo() (*asset, error) {
	bytes, err := versionGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "version.go", size: 82, mode: os.FileMode(420), modTime: time.Unix(1454710984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".dockerignore": Dockerignore,
	".gitignore": Gitignore,
	"Dockerfile": dockerfile,
	"build.sh": buildSh,
	"entrypoint/Dockerfile": entrypointDockerfile,
	"main.go": mainGo,
	"vendor/manifest": vendorManifest,
	"version.go": versionGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".dockerignore": &bintree{Dockerignore, map[string]*bintree{}},
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"Dockerfile": &bintree{dockerfile, map[string]*bintree{}},
	"build.sh": &bintree{buildSh, map[string]*bintree{}},
	"entrypoint": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{entrypointDockerfile, map[string]*bintree{}},
	}},
	"main.go": &bintree{mainGo, map[string]*bintree{}},
	"vendor": &bintree{nil, map[string]*bintree{
		"manifest": &bintree{vendorManifest, map[string]*bintree{}},
	}},
	"version.go": &bintree{versionGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

