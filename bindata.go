// Code generated by go-bindata.
// sources:
// templates/.dockerignore
// templates/.gitignore
// templates/Dockerfile
// templates/build.sh
// templates/entrypoint/Dockerfile
// templates/main.go
// templates/vendor/manifest
// templates/version.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Dockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcf\x2c\xe1\xaa\xae\xd6\x0b\x28\xca\xcf\x4a\x4d\x2e\xf1\x4b\xcc\x4d\xad\xad\xe5\x4a\xcd\x2b\x29\xaa\x2c\xc8\xcf\xcc\x2b\xd1\xc7\x90\x4b\xcf\xd7\xc5\xa7\x1e\x9b\x74\x52\x69\x66\x4e\x8a\x5e\x71\x06\x57\x72\x51\x7e\x71\xb1\x6e\x72\x7e\x6e\x41\x66\x4e\x2a\x48\x20\xc8\xd5\xd1\xc5\xd7\x55\x2f\x37\x85\x0b\x10\x00\x00\xff\xff\x6b\xa3\x55\x57\x89\x00\x00\x00")

func DockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_Dockerignore,
		".dockerignore",
	)
}

func Dockerignore() (*asset, error) {
	bytes, err := DockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".dockerignore", size: 137, mode: os.FileMode(420), modTime: time.Unix(1468360567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8f\x41\x4b\xfc\x30\x10\xc5\xef\xf3\x29\x02\x7b\xf9\xff\x8b\x66\x51\x50\xbc\x8a\xe2\x51\x85\x3d\x8a\x94\x34\x9d\x74\xb3\xb4\x99\x98\x99\x4a\xcb\xb2\xdf\xdd\xe9\xae\x7a\x51\x3c\x4c\x66\x5e\xde\xcb\x8f\xc9\xca\xdc\xd1\x90\x63\x8f\xad\x79\x6a\x76\xe8\xc5\x04\x15\x7c\x66\x36\xe2\x24\x7a\xe3\x52\x6b\xee\xe7\xe4\x06\x9d\xfb\xd8\xb0\xf9\xb7\xd9\xba\xf2\x9d\xe6\xff\x50\x59\xd2\x72\x5a\x4c\x00\x2b\xf3\x40\x7d\x8b\x85\xa1\xa6\x66\x07\xb5\x20\xcb\x72\x7b\x5b\xfc\x36\x8a\xbe\x18\x0b\x1a\xce\xe8\x63\x50\x22\x4e\x82\x89\x23\x25\x5e\xe7\x82\x21\x4e\xc8\xca\x79\xb9\xba\xbe\x79\x7f\x7b\x85\xcf\x6e\x69\x54\x44\x65\x7d\x47\x17\xb6\xa3\xd3\x74\x69\x3d\xd4\xda\xeb\x16\xc3\x98\xbe\x44\x47\x32\x67\xe4\x25\x75\xd4\x38\x65\x2a\x62\x2b\x38\x2d\x32\xb8\x98\x16\x4f\x11\x38\xa1\x9e\xc7\xed\x2a\x9b\x0b\x05\xd8\xef\xed\x73\xa1\xe5\x53\x8f\x6e\xc0\xc3\x01\x30\x49\x99\x33\xc5\x24\xeb\x1f\x5e\x47\xe7\x7f\xe5\x7f\xb3\x3f\x02\x00\x00\xff\xff\xbb\x83\x6f\xb2\x6a\x01\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 362, mode: os.FileMode(420), modTime: time.Unix(1468360567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xb7\x32\xd4\x33\xe3\xf2\x75\xf4\xf4\x0b\x01\x62\xd7\x20\x05\xff\xe4\x92\xfc\xa4\x9c\x52\x1d\x05\xcf\xbc\x64\x3d\x05\x9b\x94\xfc\xe4\xec\xd4\x22\x87\x7c\x88\xa8\x5e\x72\x7e\xae\x1d\x17\x57\xb8\x7f\x90\xb7\x8b\x67\x90\x82\x7e\x7a\xbe\x7e\x71\x51\xb2\x7e\x7a\x66\x49\x46\x69\x12\x48\x52\x1f\xaa\x50\xbf\xba\x5a\x2f\xa0\x28\x3f\x2b\x35\xb9\xc4\x2f\x31\x37\xb5\xb6\x96\xcb\xd9\x3f\x20\x52\x41\x8f\x24\x2d\x5c\x41\xa1\x7e\x0a\xa9\x79\x65\x0a\xce\xee\xfe\xf1\xae\x7e\x8e\x4e\x3e\xae\x2e\xb6\x06\x40\x77\x2b\x24\x95\x66\xe6\xa4\x28\xe8\xe6\x2b\xa0\xeb\x51\xd0\x4d\x54\xd0\xcd\x49\x49\xcb\x49\x4c\x2f\x56\x50\xd7\x2d\x56\x57\xd0\xe3\xe2\x72\xf6\x75\x51\x88\x56\xd2\xc3\xb0\x40\x29\x96\x0b\x10\x00\x00\xff\xff\x03\x3a\x2f\xc1\x09\x01\x00\x00")

func dockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerfile,
		"Dockerfile",
	)
}

func dockerfile() (*asset, error) {
	bytes, err := dockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile", size: 265, mode: os.FileMode(420), modTime: time.Unix(1461000606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _buildSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x7f\x4f\xe3\x38\x10\xfd\x3f\x9f\x62\xce\x17\xf1\xe3\xa4\xd4\xe2\xee\x84\x4e\x45\xbd\x5d\x50\x11\x42\x5a\xa0\x02\x21\x56\xda\x5d\x55\x26\x71\x5a\x2f\x89\x5d\xc5\x6e\x29\x94\x7e\xf7\xf5\xd8\x4e\x93\x96\xb2\x2a\xff\x90\xce\xbc\x37\xcf\xcf\x33\x9e\x3f\xff\xa0\x8f\x42\xd2\x47\xa6\xc7\x51\x74\x3a\x18\x0c\xaf\x4f\xaf\xce\x7b\x8b\x45\x67\x50\xa9\x9f\x3c\x35\xd7\xac\xe4\xcb\x65\x74\x76\x7f\xf9\xa5\x3f\xec\x5f\xde\xf6\xe2\xc1\x43\x9f\x66\x42\x9b\xe8\xf2\xea\xf4\xe2\xdc\xe3\x0b\x95\xb2\x82\xc6\x35\x3f\x8a\x1e\xa7\xa2\xc8\x86\x4a\x0e\x33\x95\x3e\xf1\xea\xe0\x10\x16\x11\x80\xff\x01\x2e\x09\x49\x62\xd8\x08\xe2\xa6\x4a\x17\xe3\x06\x3a\xd1\xb2\xc5\x77\x95\x03\xdd\x7d\xc3\x48\x29\xdd\x23\xf1\x11\x69\x45\x58\x95\x8e\x6d\xec\x6f\x12\xd9\x20\x97\x33\xb8\xb8\xb9\xb9\xeb\x15\x42\x4e\xe7\x36\x5b\x0b\x32\x40\x49\x0d\x92\x1b\x1b\x4c\x84\xd4\x86\x15\x85\x9e\xe6\xb9\x98\x43\x8a\xa1\x22\xcb\x0b\x44\xec\x27\xcf\xfb\x90\x28\x20\xf1\x62\xe5\x7c\x49\xe3\x45\x6d\x70\x99\xc4\x5e\x94\xac\x1d\x57\xcf\x37\x8f\xbc\xee\x03\x48\xc6\xaa\x67\x21\x09\x10\x56\x66\xc7\xff\x12\xe4\xa6\x6a\xf2\x12\xd0\xe9\x04\xe2\x95\x5e\x73\x9d\x7f\x59\x4b\xa6\x7a\x99\x28\x21\x0d\x45\x8a\x90\xc2\x04\x4a\x55\x42\x52\xe5\x6d\x1a\x7c\xb7\xe1\xbd\x3d\x28\x9f\x32\x51\x41\xb2\x56\x12\xc9\x13\x96\x3e\xb1\x11\xdf\xad\x25\x05\x33\x5c\x9b\x96\x3e\x56\xa8\xa6\x72\x9d\x6d\x03\x96\x6b\x8f\x82\xd2\x60\x3f\x67\xaa\x98\x96\xbc\xa5\xdc\xa5\x7c\x3e\x51\x95\xa1\x01\xf2\xbe\xed\x3e\xee\xef\xa0\x36\x0e\x81\x85\xa2\x39\x33\x1b\x83\x50\x72\xad\xad\x91\x5e\x7c\x84\x4d\x4f\xc7\x0a\xe2\x10\xc2\xdf\x73\x61\xe0\xc8\xdd\x6f\xa5\xb4\x1e\xa6\xaa\x9c\x88\x82\x0f\x9d\xd1\x83\x43\xac\x92\xab\xca\x0d\x13\x08\x09\xbe\x2f\xe0\x27\xc6\x7e\x65\xea\x59\x9f\x58\x7b\xee\x50\x1e\x88\xed\x46\xe8\x3f\xff\x1d\x83\xeb\xde\x2a\x1f\xd4\x89\xab\x2d\xe4\xa8\x0b\xf1\x02\x0b\xdb\x29\x59\x78\xde\x92\x04\xe0\xe6\x3c\xc4\x88\x23\xee\xbf\x1f\xa7\xff\x81\x66\x7c\x46\xe5\xb4\x28\x1c\x25\x53\x92\x47\xe1\x9f\x35\xe3\x2f\xbc\x76\xe1\x2e\x03\x87\x01\x5a\x7f\x6f\x6f\xe0\xee\x0a\x88\xcb\xe4\xcc\xda\xce\x48\x7b\x16\x43\xd7\x1a\xe0\x66\xa6\xe1\x60\x67\xb7\x17\xc7\x4c\x83\xc3\x21\xde\x8e\x73\x99\x06\x18\xa6\x6f\x0b\xb0\xce\xd4\x58\xeb\x16\x1f\xd4\xef\xac\xee\xe0\xb6\xf5\x24\xdf\x1b\x6e\x27\x5b\xb2\x15\x2f\x38\xd3\x7c\xb8\x29\xbf\x7a\x51\xb8\xfe\xea\x67\xb6\x02\xd5\x01\xc3\x2c\x26\x7d\xcd\x71\x79\x34\xfb\xc2\xc2\x3a\x36\xd3\x19\xbd\x92\xb5\x04\x59\x3d\xd7\xd9\xc7\x04\xd4\xa3\xf5\x90\x93\x87\x4a\x19\xee\x63\x1f\x10\xd0\x44\xc9\x84\x5c\x7f\x2e\x2a\xe3\xf5\xde\x14\x39\x7c\xb3\x72\x18\x22\xd0\xeb\xd9\xbd\xe4\x1a\x4f\xe0\xc7\x09\x98\x31\x97\x51\x33\xd4\x7d\x3f\x12\x67\x68\x91\x84\x91\x6c\x66\xd0\x03\xf1\xad\xc5\x9f\xf0\x49\x89\x68\x5b\x75\x7b\xb4\x6d\xa5\x6f\xee\xbe\xb6\xeb\xae\x6e\x72\xb7\xa2\xa1\x4b\xc9\x07\xc5\x6f\x7d\xba\x2d\xf0\xae\xaf\xbb\x09\xb9\x05\x92\x84\x05\xb2\xa3\xd4\x96\xa5\xb3\x55\xcc\x17\xb8\xc7\xa5\xd5\x85\x0e\x75\xc0\x8e\x1e\x87\x3b\xa6\xf6\xa4\xb4\xe5\x93\xae\x1f\xa5\xbd\xe6\xb0\xdd\x10\x7f\x8e\x7e\x05\x00\x00\xff\xff\x77\x92\xc5\x95\xd0\x07\x00\x00")

func buildShBytes() ([]byte, error) {
	return bindataRead(
		_buildSh,
		"build.sh",
	)
}

func buildSh() (*asset, error) {
	bytes, err := buildShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "build.sh", size: 2000, mode: os.FileMode(493), modTime: time.Unix(1468363592, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4e\x2e\x4a\x2c\x49\xce\xe0\xf2\x75\xf4\xf4\x0b\x01\x62\xd7\x20\x05\xff\xe4\x92\xfc\xa4\x9c\x52\x1d\x05\xcf\xbc\x64\x3d\x05\x9b\x94\xfc\xe4\xec\xd4\x22\x87\x7c\x88\xa8\x5e\x72\x7e\xae\x1d\x17\x97\xa3\x8b\x8b\x42\x75\xb5\x5e\x40\x51\x7e\x56\x6a\x72\x89\x5f\x62\x6e\x6a\x6d\x2d\x86\x00\x97\xab\x5f\x48\x50\x64\x80\x3f\xd0\x64\x85\x68\x25\x3d\x7d\x74\x79\xa5\x58\x2e\x40\x00\x00\x00\xff\xff\x2b\xf7\x77\x5e\x84\x00\x00\x00")

func entrypointDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_entrypointDockerfile,
		"entrypoint/Dockerfile",
	)
}

func entrypointDockerfile() (*asset, error) {
	bytes, err := entrypointDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint/Dockerfile", size: 132, mode: os.FileMode(420), modTime: time.Unix(1454710734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x2a\xa0\x28\xb5\x48\xe4\xee\xd5\xa8\x0f\xc6\x46\x6d\x53\xd4\x4e\x60\xa7\x41\x81\xa2\x28\x68\x79\x24\xb3\x2b\x91\x2a\x49\x39\x59\x04\xfe\xef\x9d\x21\xa5\xac\xd7\x9b\xbd\x48\x24\x67\x38\x1f\xef\xbd\x61\x2f\xab\x8f\xb2\x41\xe8\xa4\xd2\x69\xaa\xba\xde\x58\x0f\x22\x4d\xb2\xba\xf3\x19\xfd\x5a\xd3\xf0\xcf\xb8\xf8\x9d\x39\xd5\x68\xd9\xf2\xc6\x7d\x72\x95\x6c\xc3\xd2\xab\x0e\xb3\x94\x16\x8d\xf2\x87\x61\x57\x54\xa6\x9b\x55\x66\x8f\x8d\xd4\x8d\xf3\x72\x56\xb5\x2a\xbb\xb4\x5a\xa4\x68\x8d\xb9\x76\xd8\x1d\xd1\xce\xe2\xef\xc2\xab\x96\x5e\x1d\xc8\xb7\x35\x6c\xb9\x41\x38\x37\x1e\x95\x53\x46\x77\xb8\x57\x92\xe3\xec\x71\x37\x50\xa9\x79\x9a\x1e\xa5\x85\xb0\x83\x05\xdc\x60\x71\xc3\x4b\x91\xbd\xbc\x14\xf7\xd6\xfc\x8b\x95\x5f\xcb\x0e\x4f\xa7\x39\x77\x9c\x91\x7b\x3d\xe8\x2a\xb4\x2f\x72\x78\x49\x13\xd9\xf7\x30\x5f\x00\x95\x5c\xac\xf1\x69\xd9\xf7\x22\x0f\x87\x05\x5f\xa3\x88\x5f\x05\xca\xa2\xf9\x11\x2d\xd7\x43\x1e\xc7\xb8\x9a\xee\x2d\x2b\x1f\xcf\xed\xa0\xe3\xc9\xcf\xad\x6c\x1c\x1d\xfc\xf5\x37\x67\xe1\x1d\xe5\x4d\x78\xbd\xf5\x56\xe9\x66\x3a\x49\x38\xc1\x1c\x00\x32\x7c\x96\x5d\xdf\xe2\x15\x60\x76\xc5\x86\x52\x1f\x1f\xa5\x9d\xc7\x62\x36\x77\xbf\x95\x1f\x1e\xd6\xcb\x55\x79\x3a\xfd\x53\xfe\xb9\x5c\xdd\xff\x5e\x46\xb7\x3f\x1c\x51\x4b\x01\xb2\x32\xde\x07\x17\xe2\x43\x4d\x09\x82\xc7\x89\x3e\xa7\x58\xd4\x66\xd0\xc2\xb8\x62\x69\x1b\x97\xa7\xa7\x11\x16\x2a\x59\x54\x46\x7b\x7c\xf6\xf0\x8e\x0b\xfc\x10\x37\x01\xa9\xb1\x28\x46\xab\x41\x7f\xd7\x7b\x37\xf9\x12\xaa\x09\x09\xe5\x01\x6d\xc7\xd6\x4e\x7e\x44\x51\x1d\xa4\x06\x4a\xb0\x0d\x02\xca\x83\x03\x2d\x8a\xb5\xf1\xaa\xfe\x24\x46\xf7\x2b\x18\x65\x55\x6c\x6f\x7f\x79\x28\x37\xab\xb3\x50\x1b\xac\x50\x1d\x71\xcf\x21\x6b\xd9\x3a\x24\x53\x63\x80\x0b\x8d\xd4\x25\x3f\x5d\x8f\xae\xb4\x26\xfd\x12\x4f\x4a\xfb\x56\x8b\x6c\x0c\x06\x76\x0c\x71\x05\x4f\x52\x79\x86\xc2\x1b\xc0\x67\xe5\x49\x08\xc9\x57\x79\x16\xe0\xed\x80\x84\x90\xe0\x2a\x6a\x63\x43\x12\x55\xc3\xa5\x63\x20\xeb\x8b\x84\xb7\x3f\xb4\x2d\xec\x10\x76\x34\x5e\x45\x08\x9e\x50\xef\x25\x65\x12\x3f\xf2\x8e\x00\x4e\x92\xfd\xdb\xca\x2c\x5a\x63\xfa\x39\x7c\x7f\xcc\x88\xef\x88\x31\x5f\xe1\x21\x2b\xb6\x2d\x62\x2f\xde\xc3\x3b\x88\x5b\x24\xc4\xf7\x39\x93\x38\x51\x76\x41\xc5\x05\x6d\xa3\x00\xbe\x64\x6f\x74\x1d\xd5\x27\x26\xb5\xf1\x70\x70\xb7\x93\xe7\x82\xc4\x9f\xc1\xab\x54\x0f\x86\xa7\xe3\x57\x6c\xfb\x73\xda\xdf\xbe\x90\x84\x19\x2e\x36\xb8\x17\x19\xc0\x4a\x39\xc7\x55\x58\xfc\x6f\x50\x96\xf0\x63\x3d\xc2\xf5\xf5\x74\x8f\x81\xfe\x96\xae\x23\x78\x9f\xd1\x7c\x1f\x9a\x4f\x13\x8b\x7e\xb0\x7a\x4a\xfd\x8a\xc6\xeb\x2c\x9e\x75\x3e\x9e\x11\xb8\xd6\x72\xfb\xf1\xe9\xe1\x69\x1f\x67\x58\x3c\x96\x9b\xed\xed\xdd\x3a\x8f\xed\x93\xd7\x77\x0b\xd0\xaa\x0d\xad\xd0\xd6\xd8\x15\x3a\x1e\xad\xa0\x44\xa2\x7d\xdb\x33\xef\xb5\xc8\x4a\x36\xc2\x13\x3d\x52\x53\x66\xd0\x43\xb7\x43\x3b\xd2\xf9\x39\x70\x42\x0f\x6b\x71\x2f\xb5\xaa\x48\x2e\xe7\x31\x43\x59\x45\x08\x24\xf2\xd0\xdc\xd4\xdb\x18\x71\xa2\x89\xa7\xf4\xff\x00\x00\x00\xff\xff\xa3\x6d\x3c\x8c\xbe\x05\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 1470, mode: os.FileMode(420), modTime: time.Unix(1468363442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vendorManifest = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\xd3\xcf\x8a\xdb\x30\x10\x06\xf0\xb3\xf3\x14\xc5\xe7\xb4\x96\x22\x4b\x1a\xed\xab\x94\x1e\x66\x46\xa3\xc4\x10\xff\xc1\x56\x16\x96\xb2\xef\x5e\x25\x9b\x92\x6e\x59\x82\x77\x21\x27\xdb\x83\x3e\xf8\x7e\x92\xfc\x7b\x53\xd5\xcf\x32\x2f\xdd\x38\xd4\x4f\xdf\xd4\xb6\x7c\x46\x99\x64\x88\x32\x70\x27\x4b\x99\xfd\xdc\x54\x55\x59\x55\x55\x75\xd7\x4f\xe3\x9c\x27\xcc\x87\x32\xae\xf7\x5d\x3e\x9c\xe8\x07\x8f\x7d\xc3\x63\x94\x3d\x0e\xfb\x25\x63\xc3\xc7\xae\xde\x5e\x96\xcf\x32\x8d\x4b\x97\xc7\xf9\xe5\xbc\xfc\x90\xf3\xb4\x3c\x35\xcd\x8a\xd8\x73\x77\xad\x53\x7b\x9d\xac\x8f\x46\xa9\x18\x1d\x7a\x50\xc8\x1a\xac\x63\xa5\x2c\xb7\x64\x35\x70\x8a\x6d\x00\xe1\x6b\x94\x66\x1c\xf8\x52\xae\xc7\x25\xcb\x7c\x1d\x0f\x63\x96\x25\x9f\x2d\x79\x3e\x49\x19\xbd\x6e\xd7\x98\x66\x19\x97\x66\x3f\x7e\x5f\xa4\x2f\x3b\xd4\xbc\x3d\xd6\xdb\xde\xc7\x3f\xc0\x19\x4f\xe4\x20\x01\x70\xdb\x6a\x00\x08\x49\x61\xa0\x24\xd8\xa2\x35\xc6\x44\xe3\x28\x6a\x1b\xed\x7d\xdc\xdf\xea\xef\xfb\x7d\x89\x9c\x30\x77\x87\xd2\xfc\x38\xae\x66\x7e\x14\xb9\x09\x0b\x83\xa3\x4f\x11\x10\x6c\x50\x36\x39\x8f\xda\x5b\x83\x89\xda\x28\x31\x32\x58\x29\x83\x36\x3d\xe0\xf8\x7a\xcc\x79\x38\x6f\xff\xa5\x1b\xd2\x51\xd6\x92\xee\x24\x6f\xb2\xc0\x24\xc9\xb3\xb1\x26\x68\x66\x2c\x36\x6d\x13\x68\xd0\x91\x15\x69\x20\x0e\xde\xb8\x48\xf4\x48\x59\xb7\x94\xb7\x97\x4f\xb3\xfe\x8b\xfd\x73\x5a\x8e\x7c\xb9\x72\xc9\xea\xe4\xbd\x02\x6f\x95\x20\x83\x4a\x68\x80\x82\xdd\x11\x85\x64\x76\xce\x84\x07\x98\xde\x4a\xf4\x12\x3b\x3c\x57\x8c\x42\xa7\xfd\x5a\xd8\xdd\xec\x4d\x97\x52\xf9\xad\x2c\xee\x14\x82\x0b\xa1\xd5\x1a\x5c\xdb\x12\x95\x5b\xe8\x70\xa7\x5d\x44\x1d\x0c\xb3\x36\x9f\xd5\x6d\xaa\x5f\x9b\xd7\xcd\x9f\x00\x00\x00\xff\xff\xed\xbe\xc0\xb1\x47\x05\x00\x00")

func vendorManifestBytes() ([]byte, error) {
	return bindataRead(
		_vendorManifest,
		"vendor/manifest",
	)
}

func vendorManifest() (*asset, error) {
	bytes, err := vendorManifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vendor/manifest", size: 1351, mode: os.FileMode(420), modTime: time.Unix(1468362540, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _versionGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xd2\xd7\x57\x08\x73\x0d\x0a\xf6\xf4\xf7\x53\xc8\x2c\x56\x28\xc9\x48\x55\x48\x2e\x2d\x2a\x4a\xcd\x2b\x51\x48\x2c\x28\xc8\xc9\x4c\x4e\x2c\xc9\xcc\xcf\x53\x08\x4b\x2d\x2a\x06\xd2\x5c\x65\x89\x45\x70\xe5\xb6\x0a\x4a\x06\x7a\x40\xa8\xc4\x05\x08\x00\x00\xff\xff\xbb\x3d\x68\x63\x52\x00\x00\x00")

func versionGoBytes() ([]byte, error) {
	return bindataRead(
		_versionGo,
		"version.go",
	)
}

func versionGo() (*asset, error) {
	bytes, err := versionGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "version.go", size: 82, mode: os.FileMode(420), modTime: time.Unix(1454710984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".dockerignore": Dockerignore,
	".gitignore": Gitignore,
	"Dockerfile": dockerfile,
	"build.sh": buildSh,
	"entrypoint/Dockerfile": entrypointDockerfile,
	"main.go": mainGo,
	"vendor/manifest": vendorManifest,
	"version.go": versionGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".dockerignore": &bintree{Dockerignore, map[string]*bintree{}},
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"Dockerfile": &bintree{dockerfile, map[string]*bintree{}},
	"build.sh": &bintree{buildSh, map[string]*bintree{}},
	"entrypoint": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{entrypointDockerfile, map[string]*bintree{}},
	}},
	"main.go": &bintree{mainGo, map[string]*bintree{}},
	"vendor": &bintree{nil, map[string]*bintree{
		"manifest": &bintree{vendorManifest, map[string]*bintree{}},
	}},
	"version.go": &bintree{versionGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

