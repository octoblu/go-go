// Code generated by go-bindata.
// sources:
// templates/.dockerignore
// templates/.gitignore
// templates/Dockerfile
// templates/build.sh
// templates/entrypoint/Dockerfile
// templates/main.go
// templates/vendor/manifest
// templates/version.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Dockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcf\x2c\xe1\xaa\xae\xd6\x0b\x28\xca\xcf\x4a\x4d\x2e\xf1\x4b\xcc\x4d\xad\xad\xe5\x4a\xcd\x2b\x29\xaa\x2c\xc8\xcf\xcc\x2b\xd1\xc7\x90\x4b\x2a\xcd\xcc\x49\xd1\x2b\xce\xe0\x0a\x72\x75\x74\xf1\x75\xd5\xcb\x4d\xe1\x02\x04\x00\x00\xff\xff\xc2\xa4\xaa\x2d\x45\x00\x00\x00")

func DockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_Dockerignore,
		".dockerignore",
	)
}

func Dockerignore() (*asset, error) {
	bytes, err := DockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".dockerignore", size: 69, mode: os.FileMode(420), modTime: time.Unix(1454951266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x41\x4b\xc4\x30\x10\x85\xef\xf3\x2b\x02\x7b\xd1\x22\x59\x14\x14\xaf\xa2\x78\x54\x61\x8f\x22\x25\x4d\x27\xdd\x2c\x6d\x26\x66\xa6\xd2\xb2\xec\x7f\x77\xba\x55\x2f\x1e\x26\x33\x2f\xf3\xf2\xf1\xb2\x31\x8f\x34\xe4\xd8\x63\x6b\x5e\x9b\x03\x7a\x31\x41\x05\x5f\x99\x9d\x38\x89\xde\xb8\xd4\x9a\xa7\x39\xb9\x41\xe7\x3e\x36\x6c\x2e\x76\x7b\x57\xfe\xdc\x7c\x09\x95\x25\x2d\xa7\xc5\x04\xb0\x31\xcf\xd4\xb7\x58\x18\x6a\x6a\x0e\x50\x0b\xb2\x2c\xb7\x0f\xc5\xef\xa3\xe8\x8b\xb1\xa0\xe1\x8c\x3e\x06\x25\xe2\x24\x98\x38\x52\xe2\x6d\x2e\x18\xe2\x84\xac\x9c\xf7\xdb\xbb\xfb\xaf\xcf\x0f\xf8\xe9\x96\x46\x45\x54\xd6\x77\x74\x6d\x3b\x5a\xa7\x1b\xeb\xa1\xd6\x5e\xb7\x18\xc6\xf4\x2b\x3a\x92\x39\x23\x2f\xae\xb3\xc6\x29\x53\x11\x5b\xc1\x1a\x64\x70\x31\x2d\x3b\x45\xe0\x84\x7a\x9e\xd3\x55\x36\x17\x0a\x70\x3c\xda\xb7\x42\xcb\xa7\x5e\xdc\x80\xa7\x13\x60\x92\x32\x67\x8a\x49\xb6\xff\x76\xdf\x01\x00\x00\xff\xff\x6a\x2d\xcc\x84\x37\x01\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 311, mode: os.FileMode(420), modTime: time.Unix(1454710734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xb7\x32\xd4\x33\xe3\xf2\x75\xf4\xf4\x0b\x01\x62\xd7\x20\x05\xff\xe4\x92\xfc\xa4\x9c\x52\x1d\x05\xcf\xbc\x64\x3d\x05\x9b\x94\xfc\xe4\xec\xd4\x22\x87\x7c\x88\xa8\x5e\x72\x7e\xae\x1d\x17\x57\xb8\x7f\x90\xb7\x8b\x67\x90\x82\x7e\x7a\xbe\x7e\x71\x51\xb2\x7e\x7a\x66\x49\x46\x69\x12\x48\x52\x1f\xaa\x50\xbf\xba\x5a\x2f\xa0\x28\x3f\x2b\x35\xb9\xc4\x2f\x31\x37\xb5\xb6\x96\xcb\xd9\x3f\x20\x52\x41\x8f\x24\x2d\x5c\x41\xa1\x7e\x0a\xa9\x79\x65\x0a\xce\xee\xfe\xf1\xae\x7e\x8e\x4e\x3e\xae\x2e\xb6\x06\x40\x77\x2b\x24\x95\x66\xe6\xa4\x28\xe8\xe6\x2b\xa0\xeb\x51\xd0\x4d\x54\xd0\xcd\x49\x49\xcb\x49\x4c\x2f\x56\x50\xd7\x2d\x56\x57\xd0\xe3\xe2\x72\xf6\x75\x51\x88\x56\xd2\xc3\xb0\x40\x29\x96\x0b\x10\x00\x00\xff\xff\x03\x3a\x2f\xc1\x09\x01\x00\x00")

func dockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerfile,
		"Dockerfile",
	)
}

func dockerfile() (*asset, error) {
	bytes, err := dockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile", size: 265, mode: os.FileMode(420), modTime: time.Unix(1461000606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _buildSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x51\x4f\xdb\x30\x10\x7e\xcf\xaf\xb8\x65\x11\x6c\x0f\xa9\xc5\x2b\x53\xb4\x31\x81\x10\xd2\x80\x0a\x36\x31\x69\x9b\x2a\x93\x38\xad\x87\x63\x57\x89\x0b\x85\xd2\xff\x3e\x9f\xed\x34\x4e\x97\x4a\x88\xed\xad\xfd\xee\xbe\xef\xbb\xf3\xdd\xe5\xed\x1b\x72\xcb\x25\xb9\xa5\xcd\x2c\x8a\x8e\xc6\xe3\xc9\xc5\xd1\xf9\x49\xb6\x5a\x8d\xc6\xb5\xfa\xcd\x72\x7d\x41\x2b\xb6\x5e\x47\x5f\xcf\xc7\x93\xe3\xb3\xab\x2c\x19\xdf\x1c\x13\x5d\xcd\xa3\xb3\xf3\xa3\xd3\x13\x97\x2c\x54\x4e\x05\x49\x5a\x72\x14\xdd\x2e\xb8\x28\x26\x4a\x4e\x0a\x95\xdf\xb1\xfa\xdd\x7b\x58\x45\x00\xee\x0f\xd8\x20\xa4\xa9\xa6\x53\x48\x3a\x95\x43\xc4\x35\x8c\xa2\x75\xc0\xb7\xca\x9e\xce\xe4\x3d\x9c\x5e\x5e\x5e\x67\x82\xcb\xc5\x12\xa6\xaa\x55\xa2\x80\x5a\x0d\x48\xa6\x0d\x98\x72\xd9\x68\x2a\x44\xb3\x28\x4b\xbe\x84\x1c\x21\x51\x94\x02\x33\xf6\xd3\x87\x7d\x48\x15\xc4\xc9\xca\xf7\xb3\x26\xc9\xaa\xad\x7b\x1d\xf7\xdc\x9b\xe5\xce\x0a\x0a\x5a\x3f\x70\xf9\xaf\x25\x6c\xfb\xe6\x6a\xfe\xe8\x9d\xf2\x39\x24\xbe\xc2\xee\x5d\x4d\xd6\xae\x08\x93\xba\x7e\x9c\x2b\x2e\x35\x41\x25\x2e\xb9\xf6\x4a\x75\x05\x69\x5d\x76\x1c\xf8\x69\x40\xd8\xdb\x83\xea\xae\xe0\x35\xa4\x81\x1c\x32\xe7\x34\xbf\xa3\x53\xf6\xb2\x89\x09\xaa\x59\xa3\x03\x73\x54\xa8\x17\xb2\xcf\x36\x80\xe1\x9a\x3a\xac\xb3\xf9\x79\xaf\xc4\xa2\x62\x1b\xdf\x43\xc2\x96\x73\x55\x6b\x5f\xda\xc0\x4e\x38\xdc\xf5\xbe\x69\xd9\xb3\x5c\xd1\x92\xe7\xde\xd4\xce\x0b\x2a\xd6\x34\xa6\x8d\x2c\x39\xc0\xb1\xe5\x33\x05\x89\x87\xf0\xff\x92\x6b\x38\x40\xa2\xab\x70\x62\xfb\xf3\x7c\x7c\x3a\xf4\x7a\x7e\x06\x2b\x0b\xb1\x45\x4a\xca\x05\x2b\x62\x93\xb0\xb5\xdb\x41\xe2\x76\xa4\xe3\xe0\x13\xf4\x45\x11\xe9\xe2\x38\xf9\x7e\xdc\x22\x5d\x82\x1f\x4b\x90\xd0\x22\x6d\x8e\xe9\xc6\xb6\xfe\xca\x66\xdc\xb3\x0d\xf4\xe2\x02\xff\xbb\x54\x3c\xae\xd7\x14\x1a\xdc\xe4\xdf\xc5\x86\xc1\xc0\xab\x66\x82\xd1\x86\xf5\xfc\x36\xcb\x5f\xf0\xc6\xed\x97\xb9\x88\x4d\x51\x2d\xa0\xa9\xc9\xc9\x9f\xca\xde\xb1\xa6\x26\x6d\x64\x22\xa3\xe9\x53\xbc\x75\xc5\x9e\x56\xdd\xef\x26\xa0\x1f\x69\x77\x32\xbe\xa9\x95\x66\x0e\xdb\x41\xc0\x06\x2a\xca\x65\x7f\xbb\x55\xc1\xb2\x38\x39\xc0\x87\xe1\x25\xfc\x30\x76\x08\xc5\x90\x65\x10\xdb\x94\x18\x7e\x7d\x00\x3d\x63\xd2\x5e\x8e\x33\xfb\x62\xb9\x9f\xb1\xc1\xd8\xc2\xc1\xbe\xb8\x34\xbc\x8b\xe4\xa3\xf9\x5d\xf2\x68\x48\xda\xed\xf5\x90\xf6\xb1\xdb\xf8\x40\x3c\x3c\xad\x97\xa9\x9b\xae\x87\xa4\x2f\xaf\xbf\x87\xba\x9b\x21\xbd\x4c\xd4\x0f\x7f\x48\xf8\xca\x85\x42\xf1\xde\xaa\x0c\x1a\x38\xea\x37\xfc\x92\x1c\xc2\x88\xd8\xc4\x51\x33\x73\x6f\x49\x5c\xd3\xc4\xd4\x48\x5a\xe3\xf0\x7b\x83\x83\x84\xe4\x53\xf4\x27\x00\x00\xff\xff\x89\xa0\xee\xbc\x73\x07\x00\x00")

func buildShBytes() ([]byte, error) {
	return bindataRead(
		_buildSh,
		"build.sh",
	)
}

func buildSh() (*asset, error) {
	bytes, err := buildShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "build.sh", size: 1907, mode: os.FileMode(493), modTime: time.Unix(1461000654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4e\x2e\x4a\x2c\x49\xce\xe0\xf2\x75\xf4\xf4\x0b\x01\x62\xd7\x20\x05\xff\xe4\x92\xfc\xa4\x9c\x52\x1d\x05\xcf\xbc\x64\x3d\x05\x9b\x94\xfc\xe4\xec\xd4\x22\x87\x7c\x88\xa8\x5e\x72\x7e\xae\x1d\x17\x97\xa3\x8b\x8b\x42\x75\xb5\x5e\x40\x51\x7e\x56\x6a\x72\x89\x5f\x62\x6e\x6a\x6d\x2d\x86\x00\x97\xab\x5f\x48\x50\x64\x80\x3f\xd0\x64\x85\x68\x25\x3d\x7d\x74\x79\xa5\x58\x2e\x40\x00\x00\x00\xff\xff\x2b\xf7\x77\x5e\x84\x00\x00\x00")

func entrypointDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_entrypointDockerfile,
		"entrypoint/Dockerfile",
	)
}

func entrypointDockerfile() (*asset, error) {
	bytes, err := entrypointDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint/Dockerfile", size: 132, mode: os.FileMode(420), modTime: time.Unix(1454710734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x2a\xa0\x28\xb5\x48\xe4\xee\xd5\xa8\x0f\xc6\x46\x6d\x53\xd4\x4e\x60\xa7\x41\x81\xa2\x28\x68\x79\x24\x73\x57\x22\x55\x92\x72\xb2\x08\xfc\xdf\x3b\x43\x4a\x59\xaf\x37\xbd\x48\x24\x67\x38\x1f\xef\xbd\x61\x2f\xab\x4f\xb2\x41\xe8\xa4\xd2\x69\xaa\xba\xde\x58\x0f\x22\x4d\xb2\xba\xf3\x19\xfd\x5a\xd3\xf0\xcf\xb8\xf8\x9d\x39\xd5\x68\xd9\xf2\xc6\x7d\x76\x95\x6c\xc3\xd2\xab\x0e\xb3\x94\x16\x8d\xf2\x87\x61\x57\x54\xa6\x9b\x55\x66\x8f\x8d\xd4\x8d\xf3\x72\x56\xb5\x2a\xbb\xb4\x5a\xa4\x68\x8d\xb9\x76\xd8\x1d\xd1\xce\xe2\xef\xc2\xab\x96\x5e\x1d\xc8\xb7\x35\x6c\xb9\x41\x38\x37\xfa\x8f\x7c\x7d\x8f\xbb\x81\x2a\xcc\xd3\xf4\x28\x2d\x84\x1d\x2c\xe0\x06\x8b\x1b\x5e\x8a\xec\xe5\xa5\xb8\xb7\xe6\x23\x56\x7e\x2d\x3b\x3c\x9d\xe6\xdc\x68\x46\xee\xf5\xa0\xab\xd0\xb5\xc8\xe1\x25\x4d\x64\xdf\xc3\x7c\x01\x54\x69\xb1\xc6\xa7\x65\xdf\x8b\x3c\x1c\x16\x7c\x8d\x22\x7e\x13\x28\x8b\xe6\x47\xb4\x4e\x19\x4d\x1e\xc7\xb8\x9a\xee\x2d\x2b\x1f\xcf\xed\xa0\xe3\xc9\xcf\xad\x6c\x1c\x1d\xfc\xf5\x37\x67\xe1\x1d\xe5\x4d\x78\xbd\xf5\x56\xe9\x66\x3a\x49\x38\xc1\x1c\x00\x32\x7c\x96\x5d\xdf\xe2\x15\x60\x76\xc5\x86\x52\x1f\x1f\xa5\x9d\xc7\x62\x36\x77\xbf\x95\x1f\x1e\xd6\xcb\x55\x79\x3a\xfd\x53\xfe\xb9\x5c\xdd\xff\x5e\x46\xb7\x3f\x1c\x31\x4a\x01\xb2\x32\xde\x07\x17\xe2\x43\x4d\x09\x82\xc7\x89\x3e\xa7\x58\xd4\x66\xd0\xc2\xb8\x62\x69\x1b\x97\xa7\xa7\x11\x16\x2a\x59\x54\x46\x7b\x7c\xf6\xf0\x8e\x0b\xfc\x10\x37\x01\xa9\xb1\x28\x46\xab\x41\x7f\xd7\x7b\x37\xf9\x12\xaa\x09\xe9\xe3\x01\x6d\xc7\xd6\x4e\x7e\x42\x51\x1d\xa4\x06\x4a\xb0\x0d\xba\xc9\x83\x03\x2d\x8a\xb5\xf1\xaa\xfe\x2c\x46\xf7\x2b\x18\xd5\x54\x6c\x6f\x7f\x79\x28\x37\xab\xb3\x50\x1b\xac\x50\x1d\x71\xcf\x21\x6b\xd9\x3a\x24\x53\x63\x80\x0b\x8d\xd4\x25\x3f\x5d\x8f\xae\xb4\x26\xd9\x12\x4f\x4a\xfb\x56\x8b\x6c\x0c\x06\x76\x0c\x71\x05\x4f\x52\x79\x86\xc2\x1b\xc0\x67\xe5\x49\x08\xc9\x37\x79\x16\xe0\xed\x80\x84\x90\xe0\x2a\x6a\x63\x43\x12\x55\xc3\xa5\x63\x20\xeb\xab\x84\xb7\x3f\xb4\x2d\xec\x10\x76\x34\x55\x45\x08\x9e\x50\xef\x25\x65\x12\x3f\xf2\x8e\x00\x4e\x92\xfd\xdb\xca\x2c\x5a\x63\xfa\x39\x7c\x7f\xcc\x88\xef\x88\x31\x5f\xe1\xd9\x2a\xb6\x2d\x62\x2f\xde\xc3\x3b\x88\x5b\x24\xc4\xf7\x39\x93\x38\x51\x76\x41\xc5\x05\x6d\xa3\x00\xbe\x66\x6f\x74\x1d\xd5\x27\x26\xb5\xf1\x70\x70\xb7\x93\xe7\x82\xc4\x9f\xc1\xab\x54\x0f\x86\xa7\xe3\x57\x6c\xfb\x73\xda\xdf\xbe\x90\x84\xd1\x2d\x36\xb8\x17\x19\xc0\x4a\x39\xc7\x55\x58\xfc\x77\x50\x96\xf0\x63\x3d\xc2\xf5\xf5\x74\x8f\x81\xfe\x3f\x5d\x47\xf0\xbe\xa0\xf9\x3e\x34\x9f\x26\x16\xfd\x60\xf5\x94\xfa\x15\x8d\xd7\x59\x3c\xeb\x7c\x3c\x23\x70\xad\xe5\xf6\xe3\x8b\xc3\xd3\x3e\xce\xb0\x78\x2c\x37\xdb\xdb\xbb\x75\x1e\xdb\x27\xaf\xef\x16\xa0\x55\x1b\x5a\xa1\xad\xb1\x2b\x74\x3c\x5a\x41\x89\x44\xfb\xb6\x67\xde\x6b\x91\x95\x6c\x84\x27\x7a\x9b\xa6\xcc\xa0\x87\x6e\x87\x76\xa4\xf3\x4b\xe0\x84\xde\xd3\xe2\x5e\x6a\x55\x91\x5c\xce\x63\x86\xb2\x8a\x10\x48\xe4\xa1\xb9\xa9\xb7\x31\xe2\x44\x13\x4f\xe9\x7f\x01\x00\x00\xff\xff\xc1\xd5\xdb\x13\xb5\x05\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 1461, mode: os.FileMode(420), modTime: time.Unix(1454710953, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vendorManifest = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x94\xdd\x6e\xdb\x3c\x0c\x86\x8f\x93\xab\xf8\x90\xe3\x7e\xb5\x64\xfd\x51\xbd\x95\x61\x07\x24\x45\x25\xde\xfc\x13\xd8\x6a\x81\x62\xe8\xbd\x4f\x69\xbb\x65\x5d\xdb\x2c\x1d\x10\xec\x28\x31\xa1\x57\x78\x1e\x93\xe6\xb7\xf5\x6a\x73\x27\xf3\xd2\x4d\xe3\xe6\xe6\x3f\x75\x55\x1f\x93\xec\x65\x4c\x32\x72\x27\x4b\xad\x7d\x5a\xaf\x56\xf5\xd4\x6a\xb5\xe9\x86\xfd\x34\x97\x3d\x96\x5d\x2d\x6f\xb6\x5d\xd9\xdd\xd2\x35\x4f\x43\x83\xbc\x48\xdf\xd7\x5b\x9a\x6e\xcc\xbd\x70\xa9\xb7\x2d\x9b\xab\xc7\xd0\x2c\xfb\x69\xe9\xca\x34\xdf\x1f\x42\xbb\x52\xf6\xcb\x4d\xd3\x9c\x1d\xbe\xeb\x9e\xd1\x36\x4c\x11\x28\x4b\x14\x23\xd2\x82\x80\xb7\x31\x04\xc8\x2e\x13\xb5\x12\x5d\x76\x36\x07\x4d\x26\x3e\x47\x69\xc6\x91\x1f\x41\x07\x5c\x8a\xcc\xcf\xe5\x71\x2a\xb2\x94\x83\x57\x99\x6f\xa5\x96\x1e\xae\xfe\xec\xc7\x53\x92\x2d\x8e\xdb\xa5\x60\xc3\x7d\x77\xae\xd9\x7b\xb1\xa3\x53\xd0\xd9\x85\x64\x94\x4a\xc9\x63\x00\x85\xac\xc1\x79\x56\xca\xb1\x25\xa7\x81\x73\xb2\x11\x84\x2f\xe2\x34\xcb\xb4\x34\xdb\xe9\xff\x45\x86\x3a\x01\xcd\xd3\xcf\xf9\x6e\x2f\xe3\x6f\xc8\x99\x40\xe4\x21\x03\xb0\xb5\x1a\x00\x62\x56\x18\x6b\x07\xd1\xa2\x33\xc6\x24\xe3\x29\x69\x97\xdc\x69\xb9\x1f\xe8\x2f\xf9\xfe\x4a\x39\x63\xe9\x76\x95\xbc\x9f\xce\xd6\x7c\x2b\x72\x34\xac\x1a\x9c\x42\x4e\x80\xe0\xa2\x72\xd9\x07\xd4\xc1\x19\xcc\x64\x93\xa4\xc4\xe0\xa4\x16\x6c\xbe\x40\xfb\x06\x2c\x65\x3c\xbc\xfe\x47\x36\xa4\x5e\xce\x55\x3a\x91\x3c\x9a\x45\x26\xc9\x81\x8d\x33\x51\x33\x63\x75\xd3\x2e\x83\x06\x9d\x58\x91\x06\xe2\x18\x8c\x4f\x44\x97\x34\xeb\x96\xfa\xef\xfe\xc3\x5a\xbf\xc5\x7e\xe9\x96\xa7\x50\x47\x2e\x3b\x9d\x43\x50\x10\x9c\x12\x64\x50\x19\x0d\x50\x74\x2d\x51\xcc\xa6\xf5\x17\x59\x20\xe5\xcb\x81\x2c\x09\xdd\x6e\xcf\xf5\x79\x2b\x72\x74\xc9\xb9\x7e\x44\x0e\x5b\x85\xe0\x63\xb4\x5a\xd7\x75\x68\x89\xea\xcc\x79\x6c\xb5\x4f\xa8\xa3\x61\xd6\xe6\x02\x2e\x4f\x10\x83\xa4\x0e\x3f\x2c\x75\x32\xfb\x0f\xed\xa6\xfd\xd7\xed\x75\x37\x36\xf7\x38\xf4\xd7\x77\xed\x69\x9d\xf7\x0e\x1f\xf9\x11\x0c\xb4\x91\x7c\xd6\x6d\x05\x8d\x1a\x53\x42\x62\x88\x49\xb9\xa0\xb9\xb5\x75\xc8\xea\x6e\xcc\xf6\x15\xff\xcf\xdb\x5e\xb3\xaf\x57\x9f\xd7\x0f\xdf\x03\x00\x00\xff\xff\x64\x8a\xda\x08\xae\x07\x00\x00")

func vendorManifestBytes() ([]byte, error) {
	return bindataRead(
		_vendorManifest,
		"vendor/manifest",
	)
}

func vendorManifest() (*asset, error) {
	bytes, err := vendorManifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vendor/manifest", size: 1966, mode: os.FileMode(420), modTime: time.Unix(1461000968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _versionGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xd2\xd7\x57\x08\x73\x0d\x0a\xf6\xf4\xf7\x53\xc8\x2c\x56\x28\xc9\x48\x55\x48\x2e\x2d\x2a\x4a\xcd\x2b\x51\x48\x2c\x28\xc8\xc9\x4c\x4e\x2c\xc9\xcc\xcf\x53\x08\x4b\x2d\x2a\x06\xd2\x5c\x65\x89\x45\x70\xe5\xb6\x0a\x4a\x06\x7a\x40\xa8\xc4\x05\x08\x00\x00\xff\xff\xbb\x3d\x68\x63\x52\x00\x00\x00")

func versionGoBytes() ([]byte, error) {
	return bindataRead(
		_versionGo,
		"version.go",
	)
}

func versionGo() (*asset, error) {
	bytes, err := versionGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "version.go", size: 82, mode: os.FileMode(420), modTime: time.Unix(1454710984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".dockerignore": Dockerignore,
	".gitignore": Gitignore,
	"Dockerfile": dockerfile,
	"build.sh": buildSh,
	"entrypoint/Dockerfile": entrypointDockerfile,
	"main.go": mainGo,
	"vendor/manifest": vendorManifest,
	"version.go": versionGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".dockerignore": &bintree{Dockerignore, map[string]*bintree{}},
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"Dockerfile": &bintree{dockerfile, map[string]*bintree{}},
	"build.sh": &bintree{buildSh, map[string]*bintree{}},
	"entrypoint": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{entrypointDockerfile, map[string]*bintree{}},
	}},
	"main.go": &bintree{mainGo, map[string]*bintree{}},
	"vendor": &bintree{nil, map[string]*bintree{
		"manifest": &bintree{vendorManifest, map[string]*bintree{}},
	}},
	"version.go": &bintree{versionGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

